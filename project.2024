# Installazione dei pacchetti necessari
install.packages(c("terra", "sf", "dplyr", "ggplot2", "caret", "raster", "sp","caret","devtools"))
devtools::install_github("rspatial/geodata")

# Caricamento dei pacchetti
library(terra)
library(sf)
library(dplyr)
library(ggplot2)
library(raster)
library(sp)
library(geodata)
library(caret)

setwd("/Users/Cat/Desktop/SPATIALECOLOGY")
#Raster SOCseq 2019
socseq_2019 <- rast("data/GSOCseq_T0_Map030.tif")
#Estensione dell'Italia. Scarica l'Italia (livello 0 = nazionale)
italy_vect <- geodata::gadm(country = "ITA", level = 0, path = "data/")
italy_vect_proj <- project(italy_vect, crs(socseq_2019))

#Raster socseq 2020 for Italy (crop and mask)
socseq_italy <- crop(socseq_2019, italy_vect_proj)    
socseq_italy <- mask(socseq_italy, italy_vect_proj)  

#Raster SOC 2019 
soc_2019 <- rast("data/GSOCmap1.5.0 copia.tif")
#Raster socseq 2020 for Italy (crop and mask)
soc_italy <- crop(soc_2019, italy_vect_proj)    
soc_italy <- mask(soc_italy, italy_vect_proj)  

#Raster uso suolo Italia
layers <- st_layers("data/usosuoloitalia.gdb")
print(layers)
usosuolo_vector <- st_read("data/usosuoloitalia.gdb", layer = "U2018_CLC2018_V2020_20u1")
usosuolo_vect <- vect(usosuolo_vector)
soc_template <- rast("data/italy_soc_2019.tif")
usosuolo_vect <- project(usosuolo_vect, crs(soc_template))
usosuolo_italy <- rasterize(usosuolo_vect, soc_template, field = "Code_18")

#Riclassifico per eliminare le categorie superflue al computo del SOC
reclass_matrix <- matrix(c(
10, 10,
20, 20,
30, 30,
40, 40,
50, 50,
60, NA,
70, NA,
80, NA,
90, NA,
100, NA
), ncol = 2, byrow = TRUE)
usosuolo_riclass <- classify(usosuolo_italy, rcl = reclass_matrix)
usosuolo_res <- resample(usosuolo_riclass, socseq_italy, method = "near")
print(usosuolo_res)

#Tasmin da lista a unico raster
files_tasmin <- list.files("data/tasmin", pattern = "\\.tif$", full.names = TRUE)
tasmin_stack <- rast(files_tasmin) #Carico tutti i raster in uno stack
print(tasmin_stack) #Controllo la dimensione e se serve allineare raster (devono avere stessa estensione e risoluzione)
tasmin_mean <- mean(tasmin_stack, na.rm = TRUE) #Creo raster aggregato (media annuale)

#Tasmax 
files_tasmax <- list.files("data/tasmax", pattern = "\\.tif$", full.names = TRUE)
tasmax_stack <- rast(files_tasmax)
tasmax_mean <- mean(tasmax_stack, na.rm = TRUE)

#Precip
files_precip <- list.files("data/precipitation", pattern = "\\.tif$", full.names = TRUE)
precip_stack <- rast(files_precip)
precip_sum <- sum(precip_stack, na.rm = TRUE)  

#NDVI
files_ndvi <- list.files("data/ndvi_italia", pattern = "\\.tif$", full.names = TRUE)
ndvi_stack <- rast(files_ndvi)
plot(ndvi_stack)
ndvi_mean <- mean(ndvi_stack, na.rm = TRUE)

#Risaldo raster a socseq_italy
ndvi_italy <- resample(ndvi_mean, socseq_italy, method = "bilinear")
tasmin_italy <- resample(tasmin_mean, socseq_italy, method = "bilinear")
tasmax_italy <- resample(tasmax_mean, socseq_italy, method = "bilinear")
precip_italy <- resample(precip_sum, socseq_italy, method = "bilinear")

#Creo lo stack dei predittori
predictors <- c(usosuolo_italy, tasmin_italy, tasmax_italy, precip_italy, ndvi_italy, soc_italy)
names(predictors) <- c("usosuolo", "tasmin", "tasmax", "precipitation", "ndvi", "SOC")

#Estraggo i valori dei predittori e del SOCseq
data_values <- as.data.frame(na.omit(cbind(values(socseq_italy), values(predictors))))
colnames(data_values)[1] <- "socseq"

#Rimuovo le righe con valori mancanti
data_values <- na.omit(data_values)

#Suddivido i dati in training e testing
set.seed(123)
train_index <- createDataPartition(data_values$socseq, p = 0.8, list = FALSE)
train_data <- data_values[train_index, ]
test_data <- data_values[-train_index, ]

#Costruisco il modello GLM
glm_model <- glm(socseq ~ ., data = train_data, family = gaussian())
summary(glm_model)

#Predico sui dati di test
predictions <- predict(glm_model, newdata = test_data)

#Valuto il modello
rmse <- sqrt(mean((predictions - test_data$socseq)^2))
r_squared <- 1 - sum((predictions - test_data$socseq)^2) / sum((mean(train_data$socseq) - test_data$socseq)^2)

#Visualizzo i risultati
cat("RMSE:", rmse, "\n")
cat("R-squared:", r_squared, "\n")

#Predizione spaziale
socseq_prediction <- predict(predictors, glm_model, type = "response")
writeRaster(socseq_prediction, "output/socseq_prediction_2019.tif", overwrite = TRUE)

#Visualizzo la mappa predetta
plot(socseq_prediction, main = "Predizione SOCseq 2019")

#####Visualizzo i residui
residuals <- residuals(glm_model)
hist(residuals, 
     main = "Distribuzione dei Residui", 
     xlab = "Residui", 
     breaks = 50, 
     col = "lightblue", 
     border = "white")

#Predizione su raster stack 
soc_pred_2019 <- predict(predictors, glm_model)
plot(soc_pred_2019, main = "SOC Predetto 2019")

####Confronto con FAO
soc_fao <- socseq_italy
diff_map <- soc_pred_2019 - soc_fao
plot(diff_map, main = "Differenza SOC predetto - FAO 2019")
writeRaster(soc_pred_2019, "output/soc_pred_2019.tif", overwrite = TRUE)
writeRaster(diff_map, "output/soc_diff_vs_fao.tif", overwrite = TRUE)

#Mappa FAO GSOC sequestrato scenario BAU 2040
fao_prediction_raster <- rast("data/scenari/GSOCseq_finalSOC_BAU_Map030.tif")
fao_prediction_raster <- project(fao_prediction_raster, crs(soc_pred_2019))
fao_prediction_raster <- crop(fao_prediction_raster, soc_pred_2019)
fao_prediction_raster <- mask(fao_prediction_raster, soc_pred_2019)
#Resample FAO sulla griglia di glm
fao_aligned <- resample(fao_prediction_raster, soc_pred_2019, method = "bilinear")

#Stack e valori come data frame
comparison_stack <- c(soc_pred_2019, fao_aligned)
names(comparison_stack) <- c("glm", "fao")
comparison_df <- as.data.frame(comparison_stack, na.rm = TRUE)

#####STATISTICA
#Correlazione Pearson
correlation <- cor(comparison_df$glm, comparison_df$fao)
cat("Correlazione Pearson tra GLM e FAO (BAU):", round(correlation, 3), "\n")

#Errore assoluto medio
mae <- mean(abs(comparison_df$glm - comparison_df$fao))
cat("Errore Assoluto Medio (MAE):", round(mae, 3), "\n")

#Errore quadratico medio
rmse <- sqrt(mean((comparison_df$glm - comparison_df$fao)^2))
cat("Errore Quadratico Medio (RMSE):", round(rmse, 3), "\n")




